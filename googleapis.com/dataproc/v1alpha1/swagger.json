{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "dataproc.googleapis.com",
  "basePath": "/",
  "info": {
    "contact": {
      "name": "Google",
      "url": "https://google.com"
    },
    "description": "An API for managing Hadoop-based clusters and jobs on Google Cloud Platform.",
    "title": "Google Cloud Dataproc",
    "version": "v1alpha1",
    "x-apiClientRegistration": {
      "url": "https://console.developers.google.com"
    },
    "x-logo": {
      "url": "https://apis-guru.github.io/api-models/cache/googleapis.com/dataproc/v1alpha1/logo.png"
    },
    "x-origin": {
      "format": "google",
      "url": "https://www.googleapis.com/discovery/v1/apis/dataproc/v1alpha1/rest",
      "version": "v1"
    },
    "x-preferred": false,
    "x-providerName": "googleapis.com",
    "x-serviceName": "dataproc"
  },
  "externalDocs": {
    "url": "https://cloud.google.com/dataproc/"
  },
  "securityDefinitions": {
    "Oauth2": {
      "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
      "description": "Oauth 2.0 authentication",
      "flow": "implicit",
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": "View and manage your data across Google Cloud Platform services",
        "https://www.googleapis.com/auth/logging.admin": "Administrate log data for your projects",
        "https://www.googleapis.com/auth/logging.read": "View log data for your projects",
        "https://www.googleapis.com/auth/logging.write": "Submit log data for your projects"
      },
      "type": "oauth2"
    }
  },
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "in": "query",
      "name": "$.xgafv",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "in": "query",
      "name": "access_token",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "in": "query",
      "name": "alt",
      "type": "string"
    },
    "bearer_token": {
      "description": "OAuth bearer token.",
      "in": "query",
      "name": "bearer_token",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "in": "query",
      "name": "callback",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "in": "query",
      "name": "fields",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "in": "query",
      "name": "key",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "in": "query",
      "name": "oauth_token",
      "type": "string"
    },
    "pp": {
      "default": true,
      "description": "Pretty-print response.",
      "in": "query",
      "name": "pp",
      "type": "boolean"
    },
    "prettyPrint": {
      "default": true,
      "description": "Returns response with indentations and line breaks.",
      "in": "query",
      "name": "prettyPrint",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "in": "query",
      "name": "quotaUser",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "in": "query",
      "name": "uploadType",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "in": "query",
      "name": "upload_protocol",
      "type": "string"
    }
  },
  "paths": {
    "/v1alpha1/projects/{projectId}/clusters": {
      "get": {
        "description": "Request a list of all clusters in a project.",
        "operationId": "dataproc.projects.clusters.list",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project that the cluster belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The standard List page size.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "The standard List page token.",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListClustersResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Request to create a cluster in a project.",
        "operationId": "dataproc.projects.clusters.create",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project that the cluster belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/projects/{projectId}/clusters/{clusterName}": {
      "delete": {
        "description": "Request to delete a cluster in a project.",
        "operationId": "dataproc.projects.clusters.delete",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project that the cluster belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Required] The cluster name.",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Request to get the resource representation for a cluster in a project.",
        "operationId": "dataproc.projects.clusters.get",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project that the cluster belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Required] The cluster name.",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "patch": {
        "description": "Request to update a cluster in a project.",
        "operationId": "dataproc.projects.clusters.patch",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project the cluster belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Required] The cluster name.",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Required] Specifies the path, relative to Cluster, of the field to update. For example, to change the number of workers in a cluster to 5, the update_mask parameter would be specified as \"configuration.worker_configuration.num_instances,\" and the PATCH request body would specify the new value, as follows: { \"configuration\":{ \"workerConfiguration\":{ \"numInstances\":\"5\" } } } Note: Currently, configuration.worker_configuration.num_instances is the only field that can be updated.",
            "in": "query",
            "name": "updateMask",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/projects/{projectId}/clusters/{clusterUuid}/agents": {
      "get": {
        "description": "List all agents Dataproc is aware of within a cluster.",
        "operationId": "dataproc.projects.clusters.agents.list",
        "parameters": [
          {
            "description": "The project from which to list agents.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cluster from which to list agents.",
            "in": "path",
            "name": "clusterUuid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Requested page size for listing.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "Page continuation token.",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListAgentsResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.admin"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.read"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.write"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/clusters/{clusterUuid}/agents/{agentId}": {
      "delete": {
        "description": "Delete an agent from Dataproc's view of a cluster. Deleting an agent is not required, but could be used in a shutdown sequence to indicate to Dataproc that the agent is to be considered dead and all agent-owned resources and tasks are free to be re-distributed.",
        "operationId": "dataproc.projects.clusters.agents.delete",
        "parameters": [
          {
            "description": "The agent's project.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The agent's cluster.",
            "in": "path",
            "name": "clusterUuid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The agent.",
            "in": "path",
            "name": "agentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.admin"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.read"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.write"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Retrieve an agent.",
        "operationId": "dataproc.projects.clusters.agents.get",
        "parameters": [
          {
            "description": "The agent's project ID.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The agent's cluster.",
            "in": "path",
            "name": "clusterUuid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The agent's ID.",
            "in": "path",
            "name": "agentId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.admin"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.read"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.write"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "put": {
        "description": "Update Dataproc's view of an agent. This is currently used to provide a is_healthy bit, but is expected to be extended to include daemon information and VM metrics for inclusion in cloud metrics.",
        "operationId": "dataproc.projects.clusters.agents.update",
        "parameters": [
          {
            "description": "The agent's project.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cluster on which the agent is running.",
            "in": "path",
            "name": "clusterUuid",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Required] ID of agent sending the update.",
            "in": "path",
            "name": "agentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.admin"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.read"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.write"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/projects/{projectId}/clusters/{clusterUuid}/tasks/{taskId}:report": {
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Report status for a task and extend the lease provided for the task.",
        "operationId": "dataproc.projects.clusters.tasks.report",
        "parameters": [
          {
            "description": "The project id of the agent.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cluster id of the agent.",
            "in": "path",
            "name": "clusterUuid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The task that is being reported on.",
            "in": "path",
            "name": "taskId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ReportTaskStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ReportTaskStatusResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.admin"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.read"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.write"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/projects/{projectId}/clusters/{clusterUuid}/tasks:lease": {
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Obtain a lease on one or more tasks. Any given task may be in any state and each agent is expected to start any non-started tasks and to monitor any YarnApplications spawned by any already running tasks. It's expected that monitoring previously launched tasks will be more prevalent when drivers are run entirely within YARN containers. While there's a single lease expiration time, in the event of multiple tasks being leased to the agent in a single call, each task has a unique lease and status must be reported before the lease times out or the task can be considered orphaned. The service will determine how many tasks to lease to agents in a single call.",
        "operationId": "dataproc.projects.clusters.tasks.lease",
        "parameters": [
          {
            "description": "The project id of the agent.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The cluster id of the agent.",
            "in": "path",
            "name": "clusterUuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/LeaseTasksRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LeaseTasksResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.admin"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.read"
            ]
          },
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/logging.write"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/projects/{projectId}/jobs/{jobId}": {
      "delete": {
        "description": "Deletes the job from the project. If the job is active, the delete fails, and the response returns `FAILED_PRECONDITION`.",
        "operationId": "dataproc.projects.jobs.delete",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project that the job belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Required] The job ID.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Gets the resource representation for a job in a project.",
        "operationId": "dataproc.projects.jobs.get",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project that the job belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Required] The job ID.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ]
    },
    "/v1alpha1/projects/{projectId}/jobs/{jobId}:cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Starts a job cancellation request. To access the job resource after cancellation, call jobs:list or jobs:get.",
        "operationId": "dataproc.projects.jobs.cancel",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project that the job belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "[Required] The job ID.",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CancelJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/projects/{projectId}/jobs:submit": {
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Submits a job to a cluster.",
        "operationId": "dataproc.projects.jobs.submit",
        "parameters": [
          {
            "description": "[Required] The ID of the Google Cloud Platform project that the job belongs to.",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SubmitJobRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "projects"
        ]
      }
    },
    "/v1alpha1/{name}": {
      "delete": {
        "description": "Deletes a long-running operation. It indicates the client is no longer interested in the operation result. It does not cancel the operation.",
        "operationId": "dataproc.operations.delete",
        "parameters": [
          {
            "description": "The name of the operation resource to be deleted.",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "x-reservedExpansion": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "operations"
        ]
      },
      "get": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "operationId": "dataproc.operations.list",
        "parameters": [
          {
            "description": "The operation collection name.",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "x-reservedExpansion": true
          },
          {
            "description": "[Required] A JSON object that contains filters for the list operation, in the format {\"key1\":\"value1\",\"key2\":\"value2\", ..., }. Possible keys include project_id, cluster_name, and operation_state_matcher. If project_id is set, requests the list of operations that belong to the specified Google Cloud Platform project ID. This key is required. If cluster_name is set, requests the list of operations that were submitted to the specified cluster name. This key is optional. If operation_state_matcher is set, requests the list of operations that match one of the following status options: ALL, ACTIVE, or NON_ACTIVE.",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "The standard List page size.",
            "in": "query",
            "name": "pageSize",
            "type": "integer"
          },
          {
            "description": "The standard List page token.",
            "in": "query",
            "name": "pageToken",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ListOperationsResponse"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "operations"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ]
    },
    "/v1alpha1/{name}:cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/access_token"
        },
        {
          "$ref": "#/parameters/alt"
        },
        {
          "$ref": "#/parameters/bearer_token"
        },
        {
          "$ref": "#/parameters/callback"
        },
        {
          "$ref": "#/parameters/fields"
        },
        {
          "$ref": "#/parameters/key"
        },
        {
          "$ref": "#/parameters/oauth_token"
        },
        {
          "$ref": "#/parameters/pp"
        },
        {
          "$ref": "#/parameters/prettyPrint"
        },
        {
          "$ref": "#/parameters/quotaUser"
        },
        {
          "$ref": "#/parameters/upload_protocol"
        },
        {
          "$ref": "#/parameters/uploadType"
        },
        {
          "$ref": "#/parameters/$.xgafv"
        }
      ],
      "post": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients may use [Operations.GetOperation] or other methods to check whether the cancellation succeeded or the operation completed despite cancellation.",
        "operationId": "dataproc.operations.cancel",
        "parameters": [
          {
            "description": "The name of the operation resource to be cancelled.",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "x-reservedExpansion": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CancelOperationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://www.googleapis.com/auth/cloud-platform"
            ]
          }
        ],
        "tags": [
          "operations"
        ]
      }
    }
  },
  "definitions": {
    "Agent": {
      "description": "A record for a single agent within Dataproc.",
      "properties": {
        "agentId": {
          "description": "[Required] 64 characters matching the regular expression: [a-z0-9.-]{1,64} An agent chosen ID. This should typically be the hostname of the GCE virtual machine on which the agent is currently running.",
          "type": "string"
        },
        "agentVersion": {
          "description": "The version of this agent in HTTP User-Agent Header value format (RFC 2616 section 14.43), e.g., \"Dataproc-Agent/1.2\".",
          "type": "string"
        },
        "lastAgentUpdateTime": {
          "description": "[Out] the last time this agent checked-in with Dataproc.",
          "type": "string"
        },
        "status": {
          "description": "Agent status.",
          "enum": [
            "STATUS_UNKNOWN",
            "INITIALIZING",
            "PERFORMING_CUSTOM_INITIALIZATION_ACTIONS",
            "RUNNING",
            "SETUP_FAILED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CancelJobRequest": {
      "description": "A request to cancel a job.",
      "type": "object"
    },
    "CancelOperationRequest": {
      "description": "The request message for Operations.CancelOperation.",
      "type": "object"
    },
    "Cluster": {
      "description": "Describes the identifying information, configuration, and status of a cluster of Google Compute Engine instances.",
      "properties": {
        "clusterName": {
          "description": "[Required] The cluster name. Cluster names within a project must be unique. Names from deleted clusters can be reused.",
          "type": "string"
        },
        "clusterUuid": {
          "description": "[Output-only] A cluster UUID (Unique Universal Identifier). Cloud Dataproc generates this value when it creates the cluster.",
          "type": "string"
        },
        "configuration": {
          "$ref": "#/definitions/ClusterConfiguration",
          "description": "[Required] The cluster configuration. It may differ from a user's initial configuration due to Cloud Dataproc setting of default values and updating clusters."
        },
        "createTime": {
          "description": "[Output-only] The timestamp of cluster creation.",
          "type": "string"
        },
        "projectId": {
          "description": "[Required] The Google Cloud Platform project ID that the cluster belongs to.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus",
          "description": "[Output-only] Cluster status."
        },
        "statusHistory": {
          "description": "[Output-only] Previous cluster statuses.",
          "items": {
            "$ref": "#/definitions/ClusterStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ClusterConfiguration": {
      "description": "The cluster configuration.",
      "properties": {
        "configurationBucket": {
          "description": "[Optional] A Google Cloud Storage staging bucket used for sharing generated SSH keys and configuration. If you do not specify a staging bucket, Cloud Dataproc will determine an appropriate Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Google Compute Engine zone where your cluster is deployed, then it will create and manage this project-level, per-location bucket for you.",
          "type": "string"
        },
        "gceClusterConfiguration": {
          "$ref": "#/definitions/GceClusterConfiguration",
          "description": "[Optional] The shared Google Compute Engine configuration settings for all instances in a cluster."
        },
        "gceConfiguration": {
          "$ref": "#/definitions/GceConfiguration",
          "description": "[Deprecated] The Google Compute Engine configuration settings for cluster resources."
        },
        "initializationActions": {
          "description": "[Optional] Commands to execute on each node after configuration is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below: ROLE=$(/usr/share/google/get_metadata_value attributes/role) if [[ \"${ROLE}\" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi",
          "items": {
            "$ref": "#/definitions/NodeInitializationAction"
          },
          "type": "array"
        },
        "masterConfiguration": {
          "$ref": "#/definitions/InstanceGroupConfiguration",
          "description": "[Optional] The Google Compute Engine configuration settings for the master instance in a cluster."
        },
        "masterDiskConfiguration": {
          "$ref": "#/definitions/DiskConfiguration",
          "description": "[Deprecated] The configuration settings of master node disk options."
        },
        "masterName": {
          "description": "[Deprecated] The Master's hostname. Dataproc derives the name from cluster_name if not set by user (recommended practice is to let Dataproc derive the name). Derived master name example: hadoop-m.",
          "type": "string"
        },
        "numWorkers": {
          "description": "[Deprecated] The number of worker nodes in the cluster.",
          "format": "int32",
          "type": "integer"
        },
        "secondaryWorkerConfiguration": {
          "$ref": "#/definitions/InstanceGroupConfiguration",
          "description": "[Optional] The Google Compute Engine configuration settings for additional worker instances in a cluster."
        },
        "softwareConfiguration": {
          "$ref": "#/definitions/SoftwareConfiguration",
          "description": "[Optional] The configuration settings for software inside the cluster."
        },
        "workerConfiguration": {
          "$ref": "#/definitions/InstanceGroupConfiguration",
          "description": "[Optional] The Google Compute Engine configuration settings for worker instances in a cluster."
        },
        "workerDiskConfiguration": {
          "$ref": "#/definitions/DiskConfiguration",
          "description": "[Deprecated] The configuration settings of worker node disk options."
        },
        "workers": {
          "description": "[Deprecated] The list of worker node names. Dataproc derives the names from cluster_name and num_workers if not set by user (recommended practice is to let Dataproc derive the name). Derived worker node name example: hadoop-w-0.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ClusterStatus": {
      "description": "The status of a cluster and its instances.",
      "properties": {
        "detail": {
          "description": "Optional details of cluster's state.",
          "type": "string"
        },
        "state": {
          "description": "The cluster's state.",
          "enum": [
            "UNKNOWN",
            "CREATING",
            "RUNNING",
            "ERROR",
            "DELETING",
            "UPDATING"
          ],
          "type": "string"
        },
        "stateStartTime": {
          "description": "Time when this state was entered.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiagnoseClusterOutputLocation": {
      "description": "The location where output from diagnostic command can be found.",
      "properties": {
        "outputUri": {
          "description": "[Output-only] The Google Cloud Storage URI of the diagnostic output. This will be a plain text file with summary of collected diagnostics.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiskConfiguration": {
      "description": "Specifies the configuration of disk options for a group of VM instances.",
      "properties": {
        "bootDiskSizeGb": {
          "description": "[Optional] Size in GB of the boot disk (default is 500GB).",
          "format": "int32",
          "type": "integer"
        },
        "numLocalSsds": {
          "description": "[Optional] Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs, and HDFS data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic configuration and installed binaries.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object"
    },
    "GceClusterConfiguration": {
      "description": "Common configuration settings for resources of Google Compute Engine cluster instances, applicable to all instances in the cluster.",
      "properties": {
        "networkUri": {
          "description": "The Google Compute Engine network to be used for machine communications. Inbound SSH connections are necessary to complete cluster configuration. Example \"compute.googleapis.com/projects/[project_id] /zones/us-east1-a/default\".",
          "type": "string"
        },
        "serviceAccountScopes": {
          "description": "The service account scopes included in Google Compute Engine instances. Must include devstorage.full_control to enable the Google Cloud Storage connector. Example \"auth.googleapis.com/compute\" and \"auth.googleapis.com/devstorage.full_control\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "zoneUri": {
          "description": "[Required] The zone where the Google Compute Engine cluster will be located. Example: \"compute.googleapis.com/projects/[project_id] /zones/us-east1-a\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GceConfiguration": {
      "description": "[Deprecated] Common configuration settings for resources of Google Compute Engine cluster instances, applicable to all instances in the cluster.",
      "properties": {
        "imageUri": {
          "description": "[Deprecated] The Google Compute Engine image resource used for cluster instances. Example: \"compute.googleapis.com/projects/debian-cloud /global/images/backports-debian-7-wheezy-v20140904\".",
          "type": "string"
        },
        "machineTypeUri": {
          "description": "[Deprecated] The Google Compute Engine machine type used for cluster instances. Example: \"compute.googleapis.com/projects/[project_id] /zones/us-east1-a/machineTypes/n1-standard-2\".",
          "type": "string"
        },
        "networkUri": {
          "description": "[Deprecated] The Google Compute Engine network to be used for machine communications. Inbound SSH connections are necessary to complete cluster configuration. Example \"compute.googleapis.com/projects/[project_id] /zones/us-east1-a/default\".",
          "type": "string"
        },
        "serviceAccountScopes": {
          "description": "[Deprecated] The service account scopes included in Google Compute Engine instances. Must include devstorage.full_control to enable the Google Cloud Storage connector. Example \"auth.googleapis.com/compute\" and \"auth.googleapis.com/devstorage.full_control\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "zoneUri": {
          "description": "[Deprecated] The zone where the Google Compute Engine cluster will be located. Example: \"compute.googleapis.com/projects/[project_id] /zones/us-east1-a\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "HadoopJob": {
      "description": "A Cloud Dataproc job for running Hadoop MapReduce jobs on YARN.",
      "properties": {
        "archiveUris": {
          "description": "[Optional] HCFS URIs of archives to be extracted in the working directory of Hadoop drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, or .zip.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "description": "[Optional] The arguments to pass to the driver. Do not include arguments, such as -libjars or -Dfoo=bar, that can be set as job properties, since a collision may occur that causes an incorrect job submission.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fileUris": {
          "description": "[Optional] HCFS URIs of files to be copied to the working directory of Hadoop drivers and distributed tasks. Useful for naively parallel tasks.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "jarFileUris": {
          "description": "[Optional] Jar file URIs to add to the CLASSPATHs of the Hadoop driver and tasks.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "loggingConfiguration": {
          "$ref": "#/definitions/LoggingConfiguration",
          "description": "[Optional] The runtime log configuration for job execution."
        },
        "mainClass": {
          "description": "The name of the driver's main class. The jar file containing the class must be in the default CLASSPATH or specified in jar_file_uris.",
          "type": "string"
        },
        "mainJarFileUri": {
          "description": "The Hadoop Compatible Filesystem (HCFS) URI of the jar file containing the main class. Examples: gs://foo-bucket/analytics-binaries/extract-useful-metrics-mr.jar hdfs:/tmp/test-samples/custom-wordcount.jar file:///home/usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples.jar",
          "type": "string"
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] A mapping of property names to values, used to configure Hadoop. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site and classes in user code.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "HiveJob": {
      "description": "A Cloud Dataproc job for running Hive queries on YARN.",
      "properties": {
        "continueOnFailure": {
          "description": "[Optional] Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.",
          "type": "boolean"
        },
        "jarFileUris": {
          "description": "[Optional] HCFS URIs of jar files to add to the CLASSPATH of the Hive server and Hadoop MapReduce (MR) tasks. Can contain Hive SerDes and UDFs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] A mapping of property names and values, used to configure Hive. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml, and classes in user code.",
          "type": "object"
        },
        "queryFileUri": {
          "description": "The HCFS URI of the script that contains Hive queries.",
          "type": "string"
        },
        "queryList": {
          "$ref": "#/definitions/QueryList",
          "description": "A list of queries."
        },
        "scriptVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] Mapping of query variable names to values (equivalent to the Hive command: 'SET name=\"value\";').",
          "type": "object"
        }
      },
      "type": "object"
    },
    "InstanceGroupConfiguration": {
      "description": "The configuration settings for Google Compute Engine resources in an instance group, such as a master or worker group.",
      "properties": {
        "diskConfiguration": {
          "$ref": "#/definitions/DiskConfiguration",
          "description": "Disk option configuration settings."
        },
        "imageUri": {
          "description": "[Output-only] The Google Compute Engine image resource used for cluster instances. Inferred from SoftwareConfiguration.image_version. Example: \"compute.googleapis.com/projects/debian-cloud /global/images/backports-debian-7-wheezy-v20140904\".",
          "type": "string"
        },
        "instanceNames": {
          "description": "The list of instance names. Dataproc derives the names from cluster_name, num_instances, and the instance group if not set by user (recommended practice is to let Dataproc derive the name).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isPreemptible": {
          "description": "Specifies that this instance group contains Preemptible Instances.",
          "type": "boolean"
        },
        "machineTypeUri": {
          "description": "The Google Compute Engine machine type used for cluster instances. Example: \"compute.googleapis.com/projects/[project_id] /zones/us-east1-a/machineTypes/n1-standard-2\".",
          "type": "string"
        },
        "managedGroupConfiguration": {
          "$ref": "#/definitions/ManagedGroupConfiguration",
          "description": "[Output-only] The configuration for Google Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups."
        },
        "numInstances": {
          "description": "The number of VM instances in the instance group. For master instance groups, must be set to 1.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Job": {
      "description": "A Cloud Dataproc job resource.",
      "properties": {
        "driverControlFilesUri": {
          "description": "[Output-only] If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.",
          "type": "string"
        },
        "driverInputResourceUri": {
          "description": "[Output-only] A URI pointing to the location of the stdin of the job's driver program, only set if the job is interactive.",
          "type": "string"
        },
        "driverOutputResourceUri": {
          "description": "[Output-only] A URI pointing to the location of the stdout of the job's driver program.",
          "type": "string"
        },
        "driverOutputUri": {
          "description": "[Output-only] A URI pointing to the location of the mixed stdout/stderr of the job's driver program—for example, gs://sysbucket123/foo-cluster/jobid-123/driver/output.",
          "type": "string"
        },
        "hadoopJob": {
          "$ref": "#/definitions/HadoopJob",
          "description": "Job is a Hadoop job."
        },
        "hiveJob": {
          "$ref": "#/definitions/HiveJob",
          "description": "Job is a Hive job."
        },
        "interactive": {
          "description": "[Optional] If set to true, then the driver's stdin will be kept open and driver_input_uri will be set to provide a path at which additional input can be sent to the driver.",
          "type": "boolean"
        },
        "pigJob": {
          "$ref": "#/definitions/PigJob",
          "description": "Job is a Pig job."
        },
        "placement": {
          "$ref": "#/definitions/JobPlacement",
          "description": "[Required] Job information, including how, when, and where to run the job."
        },
        "pysparkJob": {
          "$ref": "#/definitions/PySparkJob",
          "description": "Job is a Pyspark job."
        },
        "reference": {
          "$ref": "#/definitions/JobReference",
          "description": "[Optional] The fully-qualified reference to the job, which can be used to obtain the equivalent REST path of the job resource. If this property is not specified when a job is created, the server generates a job_id."
        },
        "sparkJob": {
          "$ref": "#/definitions/SparkJob",
          "description": "Job is a Spark job."
        },
        "sparkSqlJob": {
          "$ref": "#/definitions/SparkSqlJob",
          "description": "Job is a SparkSql job."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "[Output-only] The job status. Additional application-specific status information may be contained in the type_job and yarn_applications fields."
        },
        "statusHistory": {
          "description": "[Output-only] The previous job status.",
          "items": {
            "$ref": "#/definitions/JobStatus"
          },
          "type": "array"
        },
        "submittedBy": {
          "description": "[Output-only] The email address of the user submitting the job. For jobs submitted on the cluster, the address is username@hostname.",
          "type": "string"
        },
        "yarnApplications": {
          "description": "[Output-only] The collection of Yarn applications spun up by this job.",
          "items": {
            "$ref": "#/definitions/YarnApplication"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "JobPlacement": {
      "description": "Cloud Dataproc job configuration.",
      "properties": {
        "clusterName": {
          "description": "[Required] The name of the cluster where the job will be submitted.",
          "type": "string"
        },
        "clusterUuid": {
          "description": "[Output-only] A cluster UUID generated by the Dataproc service when the job is submitted.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobReference": {
      "description": "Encapsulates the full scoping used to reference a job.",
      "properties": {
        "jobId": {
          "description": "[Required] The job ID, which must be unique within the project. The job ID is generated by the server upon job submission or provided by the user as a means to perform retries without creating duplicate jobs. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 512 characters.",
          "type": "string"
        },
        "projectId": {
          "description": "[Required] The ID of the Google Cloud Platform project that the job belongs to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobStatus": {
      "description": "Cloud Dataproc job status.",
      "properties": {
        "details": {
          "description": "[Optional] Job state details, such as an error description if the state is ERROR.",
          "type": "string"
        },
        "endTime": {
          "description": "The time when the job completed.",
          "type": "string"
        },
        "insertTime": {
          "description": "The time of the job request.",
          "type": "string"
        },
        "startTime": {
          "description": "The time when the server started the job.",
          "type": "string"
        },
        "state": {
          "description": "[Required] A state message specifying the overall job state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "SETUP_DONE",
            "RUNNING",
            "CANCEL_PENDING",
            "CANCEL_STARTED",
            "CANCELLED",
            "DONE",
            "ERROR"
          ],
          "type": "string"
        },
        "stateStartTime": {
          "description": "[Output-only] The time when this state was entered.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeaseTasksRequest": {
      "description": "A request to lease tasks for execution by an agent.",
      "properties": {
        "agentId": {
          "description": "The agent's id.",
          "type": "string"
        },
        "currentAgentTime": {
          "description": "The current timestamp at the worker.",
          "type": "string"
        },
        "requestedLeaseDuration": {
          "description": "The requested initial lease period.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeaseTasksResponse": {
      "description": "A Response for task leasing.",
      "properties": {
        "leaseExpirationTime": {
          "description": "The worker-local lease expiration time.",
          "type": "string"
        },
        "reportStatusInterval": {
          "description": "The interval at which status should be reported.",
          "type": "string"
        },
        "tasks": {
          "description": "A list of tasks that have been leased.",
          "items": {
            "$ref": "#/definitions/Task"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListAgentsResponse": {
      "description": "Response to ListAgents",
      "properties": {
        "agents": {
          "description": "A list of agents.",
          "items": {
            "$ref": "#/definitions/Agent"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The token to send to ListAgents to acquire any following pages. Will be empty for last page.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListClustersResponse": {
      "description": "The list of all clusters in a project.",
      "properties": {
        "clusters": {
          "description": "[Output-only] The clusters in the project.",
          "items": {
            "$ref": "#/definitions/Cluster"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListJobsRequest": {
      "description": "A request to list jobs in a project.",
      "properties": {
        "clusterName": {
          "description": "[Optional] If set, the returned jobs list includes only jobs that were submitted to the named cluster.",
          "type": "string"
        },
        "jobStateMatcher": {
          "description": "[Optional] Specifies enumerated categories of jobs to list.",
          "enum": [
            "ALL",
            "ACTIVE",
            "NON_ACTIVE"
          ],
          "type": "string"
        },
        "pageSize": {
          "description": "[Optional] The number of results to return in each response.",
          "format": "int32",
          "type": "integer"
        },
        "pageToken": {
          "description": "[Optional] The page token, returned by a previous call, to request the next page of results.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListJobsResponse": {
      "description": "A response to a request to list jobs in a project.",
      "properties": {
        "jobs": {
          "description": "[Output-only] Jobs list.",
          "items": {
            "$ref": "#/definitions/Job"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "[Optional] This token is included in the response if there are more results to fetch. To fetch additional results, provide this value as the page_token in a subsequent ListJobsRequest.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that match the specified filter in the request.",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LoggingConfiguration": {
      "description": "The runtime logging configuration of the job.",
      "properties": {
        "driverLogLevels": {
          "additionalProperties": {
            "enum": [
              "LEVEL_UNSPECIFIED",
              "ALL",
              "TRACE",
              "DEBUG",
              "INFO",
              "WARN",
              "ERROR",
              "FATAL",
              "OFF"
            ],
            "type": "string"
          },
          "description": "The per-package log levels for the driver. This may include 'root' package name to configure rootLogger. Examples: com.google = FATAL, root = INFO, org.apache = DEBUG",
          "type": "object"
        }
      },
      "type": "object"
    },
    "ManagedGroupConfiguration": {
      "description": "Specifies the resources used to actively manage an instance group.",
      "properties": {
        "instanceGroupManagerName": {
          "description": "[Output-only] The name of Instance Group Manager managing this group.",
          "type": "string"
        },
        "instanceTemplateName": {
          "description": "[Output-only] The name of Instance Template used for Managed Instance Group.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "NodeInitializationAction": {
      "description": "Specifies an executable to run on a fully configured node and a timeout period for executable completion.",
      "properties": {
        "executableFile": {
          "description": "[Required] Google Cloud Storage URI of executable file.",
          "type": "string"
        },
        "executionTimeout": {
          "description": "[Optional] Amount of time executable has to complete. Default is 10 minutes. Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Operation": {
      "description": "An asynchronous operation in a project that runs over a given cluster. Used to track the progress of a user request that is running asynchronously. Examples include creating a cluster, updating a cluster, and deleting a cluster.",
      "properties": {
        "done": {
          "description": "Indicates if the operation is done. If true, the operation is complete and the `result` is available. If false, the operation is still in progress.",
          "type": "boolean"
        },
        "error": {
          "$ref": "#/definitions/Status",
          "description": "The error result of the operation in case of failure."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @ype with type URL."
          },
          "description": "Service-specific metadata associated with the operation.",
          "type": "object"
        },
        "name": {
          "description": "The name of the operation resource, in the format projects/[project_id]/operations/[operation_id]",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @ype with type URL."
          },
          "description": "The operation response. If the called method returns no data on success, the response is `google.protobuf.Empty`. If the called method is `Get`,`Create` or `Update`, the response is the resource. For all other methods, the response type is a concatenation of the method name and \"Response\". For example, if the called method is `TakeSnapshot()`, the response type is `TakeSnapshotResponse`.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "OperationMetadata": {
      "description": "Metadata describing the operation.",
      "properties": {
        "clusterName": {
          "description": "Name of the cluster for the operation.",
          "type": "string"
        },
        "clusterUuid": {
          "description": "Cluster UUId for the operation.",
          "type": "string"
        },
        "details": {
          "description": "A message containing any operation metadata details.",
          "type": "string"
        },
        "endTime": {
          "description": "The time that the operation completed.",
          "type": "string"
        },
        "innerState": {
          "description": "A message containing the detailed operation state.",
          "type": "string"
        },
        "insertTime": {
          "description": "The time that the operation was requested.",
          "type": "string"
        },
        "startTime": {
          "description": "The time that the operation was started by the server.",
          "type": "string"
        },
        "state": {
          "description": "A message containing the operation state.",
          "enum": [
            "UNKNOWN",
            "PENDING",
            "RUNNING",
            "DONE"
          ],
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OperationStatus",
          "description": "[Output-only] Current operation status."
        },
        "statusHistory": {
          "description": "[Output-only] Previous operation status.",
          "items": {
            "$ref": "#/definitions/OperationStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "OperationStatus": {
      "description": "The status of the operation.",
      "properties": {
        "details": {
          "description": "A message containing any operation metadata details.",
          "type": "string"
        },
        "innerState": {
          "description": "A message containing the detailed operation state.",
          "type": "string"
        },
        "state": {
          "description": "A message containing the operation state.",
          "enum": [
            "UNKNOWN",
            "PENDING",
            "RUNNING",
            "DONE"
          ],
          "type": "string"
        },
        "stateStartTime": {
          "description": "The time this state was entered.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PigJob": {
      "description": "A Cloud Dataproc job for running Pig queries on YARN.",
      "properties": {
        "continueOnFailure": {
          "description": "[Optional] Whether to continue executing queries if a query fails. The default value is false. Setting to true can be useful when executing independent parallel queries.",
          "type": "boolean"
        },
        "jarFileUris": {
          "description": "[Optional] HCFS URIs of jar files to add to the CLASSPATH of the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "loggingConfiguration": {
          "$ref": "#/definitions/LoggingConfiguration",
          "description": "[Optional] The runtime log configuration for job execution."
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] A mapping of property names to values, used to configure Pig. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in user code.",
          "type": "object"
        },
        "queryFileUri": {
          "description": "The HCFS URI of the script that contains the Pig queries.",
          "type": "string"
        },
        "queryList": {
          "$ref": "#/definitions/QueryList",
          "description": "A list of queries."
        },
        "scriptVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] Mapping of query variable names to values (equivalent to the Pig command: \"name=[value]\").",
          "type": "object"
        }
      },
      "type": "object"
    },
    "PySparkJob": {
      "description": "A Cloud Dataproc job for running PySpark applications on YARN.",
      "properties": {
        "archiveUris": {
          "description": "[Optional] HCFS URIs of archives to be extracted in the working directory of .jar, .tar, .tar.gz, .tgz, and .zip.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "description": "[Optional] The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fileUris": {
          "description": "[Optional] HCFS URIs of files to be copied to the working directory of Python drivers and distributed tasks. Useful for naively parallel tasks.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "jarFileUris": {
          "description": "[Optional] HCFS URIs of jar files to add to the CLASSPATHs of the Python driver and tasks.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "loggingConfiguration": {
          "$ref": "#/definitions/LoggingConfiguration",
          "description": "[Optional] The runtime log configuration for job execution."
        },
        "mainPythonFileUri": {
          "description": "[Required] The Hadoop Compatible Filesystem (HCFS) URI of the main Python file to use as the driver. Must be a .py file.",
          "type": "string"
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] A mapping of property names to values, used to configure PySpark. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.",
          "type": "object"
        },
        "pythonFileUris": {
          "description": "[Optional] HCFS file URIs of Python files to pass to the PySpark framework. Supported file types: .py, .egg, and .zip.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "QueryList": {
      "description": "A list of queries to run on a cluster.",
      "properties": {
        "queries": {
          "description": "[Required] The queries to execute. You do not need to terminate a query with a semicolon. Multiple queries can be specified in one string by separating each with a semicolon. Here is an example of an Cloud Dataproc API snippet that uses a QueryList to specify a HiveJob: \"hiveJob\": { \"queryList\": { \"queries\": [ \"query1\", \"query2\", \"query3;query4\", ] } }",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReportTaskStatusRequest": {
      "description": "A request to report task status, which may result in the corresponding lease being extended.",
      "properties": {
        "agentId": {
          "description": "The id of the agent reporting task status.",
          "type": "string"
        },
        "currentWorkerTime": {
          "description": "The current timestamp at the worker.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TaskStatus",
          "description": "Status for a single task."
        }
      },
      "type": "object"
    },
    "ReportTaskStatusResponse": {
      "description": "A response to a task status report.",
      "properties": {
        "leaseExpirationTime": {
          "description": "New task lease expiration timestamp in worker-local time.",
          "type": "string"
        },
        "reportStatusInterval": {
          "description": "The interval at which status should be reported.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SoftwareConfiguration": {
      "description": "Specifies the selection and configuration of software inside the cluster.",
      "properties": {
        "imageVersion": {
          "description": "[Optional] The version of software inside the cluster. It must match the regular expression [0-9]+\\.[0-9]+. If unspecified it will default to latest version.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SparkJob": {
      "description": "A Cloud Dataproc job for running Spark applications on YARN.",
      "properties": {
        "archiveUris": {
          "description": "[Optional] HCFS URIs of archives to be extracted in the working directory of Spark drivers and tasks. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "description": "[Optional] The arguments to pass to the driver. Do not include arguments, such as --conf, that can be set as job properties, since a collision may occur that causes an incorrect job submission.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fileUris": {
          "description": "[Optional] HCFS URIs of files to be copied to the working directory of Spark drivers and distributed tasks. Useful for naively parallel tasks.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "jarFileUris": {
          "description": "[Optional] HCFS URIs of jar files to add to the CLASSPATHs of the Spark driver and tasks.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "loggingConfiguration": {
          "$ref": "#/definitions/LoggingConfiguration",
          "description": "[Optional] The runtime log configuration for job execution."
        },
        "mainClass": {
          "description": "The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris.",
          "type": "string"
        },
        "mainJarFileUri": {
          "description": "The Hadoop Compatible Filesystem (HCFS) URI of the jar file that contains the main class.",
          "type": "string"
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] A mapping of property names to values, used to configure Spark. Properties that conflict with values set by the Cloud Dataproc API may be overwritten. Can include properties set in /etc/spark/conf/spark-defaults.conf and classes in user code.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "SparkSqlJob": {
      "description": "A Cloud Dataproc job for running Spark SQL queries.",
      "properties": {
        "jarFileUris": {
          "description": "[Optional] HCFS URIs of jar files to be added to the Spark CLASSPATH.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "loggingConfiguration": {
          "$ref": "#/definitions/LoggingConfiguration",
          "description": "[Optional] The runtime log configuration for job execution."
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] A mapping of property names to values, used to configure Spark SQL's SparkConf. Properties that conflict with values set by the Cloud Dataproc API may be overwritten.",
          "type": "object"
        },
        "queryFileUri": {
          "description": "The HCFS URI of the script that contains SQL queries.",
          "type": "string"
        },
        "queryList": {
          "$ref": "#/definitions/QueryList",
          "description": "A list of queries."
        },
        "scriptVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "[Optional] Mapping of query variable names to values (equivalent to the Spark SQL command: SET name=\"value\";).",
          "type": "object"
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). The error model is designed to be: - Simple to use and understand for most users - Flexible enough to meet unexpected needs # Overview The `Status` message contains three pieces of data: error code, error message, and error details. The error code should be an enum value of google.rpc.Code, but it may accept additional error codes if needed. The error message should be a developer-facing English message that helps developers *understand* and *resolve* the error. If a localized user-facing error message is needed, put the localized message in the error details or localize it in the client. The optional error details may contain arbitrary information about the error. There is a predefined set of error detail types in the package `google.rpc` which can be used for common error conditions. # Language mapping The `Status` message is the logical representation of the error model, but it is not necessarily the actual wire format. When the `Status` message is exposed in different client libraries and different wire protocols, it can be mapped differently. For example, it will likely be mapped to some exceptions in Java, but more likely mapped to some error codes in C. # Other uses The error model and the `Status` message can be used in a variety of environments, either with or without APIs, to provide a consistent developer experience across different environments. Example uses of this error model include: - Partial errors. If a service needs to return partial errors to the client, it may embed the `Status` in the normal response to indicate the partial errors. - Workflow errors. A typical workflow has multiple steps. Each step may have a `Status` message for error reporting purpose. - Batch operations. If a client uses batch request and batch response, the `Status` message should be used directly inside batch response, one for each error sub-response. - Asynchronous operations. If an API call embeds asynchronous operation results in its response, the status of those operations should be represented directly using the `Status` message. - Logging. If some API errors are stored in logs, the message `Status` could be used directly after any stripping needed for security/privacy reasons.",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details. There will be a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @ype with type URL."
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SubmitJobRequest": {
      "description": "A job submission request.",
      "properties": {
        "job": {
          "$ref": "#/definitions/Job",
          "description": "[Required] The job resource."
        }
      },
      "type": "object"
    },
    "SystemTaskStatus": {
      "description": "Status of cluster configuration task.",
      "properties": {
        "state": {
          "description": "The outcome of reconfiguration.",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "RUNNING",
            "FINISHED",
            "FAILED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Task": {
      "description": "A single Task for agent execution. A task in Cloud Dataproc is a unit of work originating with the Cloud Dataproc service and intended for execution on a Cloud Dataproc agent. The most straightforward example of a Task in Cloud Dataproc is one corresponding to an end-user originated Job. This task is then allocated to an available agent for execution. Other examples of Cloud Dataproc Tasks could include executing system-maintenance scripts, periodic agent upgrades, etc. Using the example of a Task corresponding to a Job, the flow through Cloud Dataproc will appear as: - The end-user submits a Job to Cloud Dataproc for execution. - The Cloud Dataproc service determines the best Cluster to execute the Job on and creates a Task for the job. - An agent polls Cloud Dataproc for outstanding Tasks via the LeaseTasks method and the Task created in step 2 is provided to the agent. - During execution of the Task, the agent updates the Task status via the ReportTaskStatus method. - Upon completion of a Task, the agent will finally ReportTaskStatus with a TaskStatus indicating the status of the driver application's exit status. - The Cloud Dataproc service updates the status of the user-submitted Job using the Task status reported by the agent.",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/TaskConfiguration",
          "description": "Configuration for this task."
        },
        "status": {
          "$ref": "#/definitions/TaskStatus",
          "description": "The status of a task."
        },
        "taskId": {
          "description": "System defined task id.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskClusterConfiguration": {
      "description": "A system task corresponding to a request for Master node to update configuration based on provided values.",
      "properties": {
        "addMembers": {
          "description": "New nodes to register with cluster.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "removeMembers": {
          "description": "Existing nodes to decommission.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "Type of configuration change.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "TYPE_CLUSTER_MEMBERSHIP_CHANGE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskConfiguration": {
      "description": "Configuration for a Dataproc Task.",
      "properties": {
        "clusterConfiguration": {
          "$ref": "#/definitions/TaskClusterConfiguration",
          "description": "Cluster reconfiguration task."
        },
        "jobConfiguration": {
          "$ref": "#/definitions/TaskJobConfiguration",
          "description": "Configuration of a Job-based task."
        },
        "maintenanceCommand": {
          "$ref": "#/definitions/TaskMaintenanceCommand",
          "description": "Execute cluster maintenance command."
        }
      },
      "type": "object"
    },
    "TaskJobConfiguration": {
      "description": "A task corresponding to a single job execution request.",
      "properties": {
        "archiveUris": {
          "description": "Required archives for the driver program or distributed program. Used by Hadoop, Spark, and PySpark jobs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "description": "Arguments for the driver program. Used by Hadoop, Spark, and PySpark jobs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "continueOnFailure": {
          "description": "True to continue processing pig or hive queries if an earlier query fails.",
          "type": "boolean"
        },
        "driverControlFilesUri": {
          "description": "[Output-only] If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.",
          "type": "string"
        },
        "driverInputUri": {
          "description": "[Output-only] A URI pointing to the location of the stdin of the job's driver program, only set if the job is interactive.",
          "type": "string"
        },
        "driverOutputUri": {
          "description": "Output URI for driver output.",
          "type": "string"
        },
        "fileUris": {
          "description": "Required files for the driver program or distributed program. Used by Hadoop, Spark, and PySpark jobs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "interactive": {
          "description": "[Optional] If set to true, then the driver's stdin will be kept open and driver_input_uri will be set to provide a path at which additional input can be sent to the driver.",
          "type": "boolean"
        },
        "jarFileUris": {
          "description": "JAR files that are required by the job.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "loggingConfiguration": {
          "$ref": "#/definitions/TaskLoggingConfiguration",
          "description": "Logging configuration for the job."
        },
        "mainClass": {
          "description": "A class name that is contained either in core Hadoop or Spark libraries or within a JAR specified within jar_file_uris.",
          "type": "string"
        },
        "mainJarFileUri": {
          "description": "A JAR containing the main driver and containing a METADATA entry for a main class contained within the jar.",
          "type": "string"
        },
        "mainPythonFileUri": {
          "description": "The main Python file for a PySpark application.",
          "type": "string"
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Properties for the submitted job.",
          "type": "object"
        },
        "pythonFileUris": {
          "description": "URIs of files required by the PySpark application",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "queryFileUri": {
          "description": "A URI of a file containing queries",
          "type": "string"
        },
        "queryList": {
          "$ref": "#/definitions/TaskQueryList",
          "description": "A list of queries specified within the API."
        },
        "scriptVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Variables to be substituted in Pig and Hive scripts.",
          "type": "object"
        },
        "submittedBy": {
          "description": "The user that the job should be attributed to in Hadoop as a posix-style username. If the user is not a member of the system's user-database, the task will be started as a system account.",
          "type": "string"
        },
        "type": {
          "description": "The type of the job.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "HADOOP",
            "SPARK",
            "PYSPARK",
            "HIVE",
            "PIG",
            "SPARK_SQL"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskJobStatus": {
      "description": "Status of a single job-based task.",
      "properties": {
        "driverExitCode": {
          "description": "If the driver has exited, its exit code.",
          "format": "int32",
          "type": "integer"
        },
        "driverState": {
          "description": "The state of the driver.",
          "enum": [
            "DRIVER_STATE_UNSPECIFIED",
            "PENDING",
            "RUNNING",
            "KILL_PENDING",
            "KILLED",
            "FINISHED",
            "FAILED"
          ],
          "type": "string"
        },
        "yarnApplications": {
          "description": "A list of YARN applications that have been launched for this task.",
          "items": {
            "$ref": "#/definitions/TaskYarnApplication"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TaskLoggingConfiguration": {
      "description": "Logging configuration for the task.",
      "properties": {
        "logLevels": {
          "additionalProperties": {
            "enum": [
              "LEVEL_UNSPECIFIED",
              "ALL",
              "TRACE",
              "DEBUG",
              "INFO",
              "WARN",
              "ERROR",
              "FATAL",
              "OFF"
            ],
            "type": "string"
          },
          "description": "Map of logger name to log4j log level.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "TaskMaintenanceCommand": {
      "description": "A system task corresponding to a request to run a maintenance command on targeted agent.",
      "properties": {
        "args": {
          "description": "Arguments to pass to the script.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "environment": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables.",
          "type": "object"
        },
        "gcsUri": {
          "description": "The executable is stored on GCS.",
          "type": "string"
        },
        "localPath": {
          "description": "The executable is a file on agent.",
          "type": "string"
        },
        "scriptOutputUri": {
          "description": "The GCS URI where executable output will be stored.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskQueryList": {
      "description": "A list of queries to execute as part of the task.",
      "properties": {
        "queries": {
          "description": "The queries to execute. The format of the queries is task-type dependent, but in each case each query should be executed within its own invocation of the interpreter for that task type.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TaskStatus": {
      "description": "Status for a single Task.",
      "properties": {
        "jobStatus": {
          "$ref": "#/definitions/TaskJobStatus",
          "description": "The status of the Job."
        },
        "systemTaskStatus": {
          "$ref": "#/definitions/SystemTaskStatus",
          "description": "The status of the SystemTask."
        }
      },
      "type": "object"
    },
    "TaskYarnApplication": {
      "description": "YARN applications that have been associated with a task.",
      "properties": {
        "id": {
          "description": "YARN application id.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "YARN application name.",
          "type": "string"
        },
        "progress": {
          "description": "The progress of the YARN application.",
          "format": "float",
          "type": "number"
        },
        "state": {
          "description": "The state of the YARN application.",
          "enum": [
            "STATE_UNSPECIFIED",
            "NEW",
            "NEW_SAVING",
            "SUBMITTED",
            "ACCEPTED",
            "RUNNING",
            "FINISHED",
            "FAILED",
            "KILLED"
          ],
          "type": "string"
        },
        "trackingUrl": {
          "description": "The tracking URL for the YARN application. This URL may or may not be accessible from outside the cluster.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "YarnApplication": {
      "description": "A YARN application created by a job. Application information is a subset of org.apache.hadoop.yarn.proto.YarnProtos.ApplicationReportProto.",
      "properties": {
        "name": {
          "description": "[Required] The application name.",
          "type": "string"
        },
        "progress": {
          "description": "[Required] The numerical progress of the application, from 1 to 100.",
          "format": "float",
          "type": "number"
        },
        "state": {
          "description": "[Required] The application state.",
          "enum": [
            "STATE_UNSPECIFIED",
            "NEW",
            "NEW_SAVING",
            "SUBMITTED",
            "ACCEPTED",
            "RUNNING",
            "FINISHED",
            "FAILED",
            "KILLED"
          ],
          "type": "string"
        },
        "trackingUrl": {
          "description": "[Optional] The HTTP URL of the ApplicationMaster, HistoryServer, or TimelineServer that provides application-specific information. The URL uses the internal hostname, and requires a proxy server for resolution and, possibly, access.",
          "type": "string"
        }
      },
      "type": "object"
    }
  }
}
